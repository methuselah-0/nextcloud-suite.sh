http {
  log_format lm_combined '$remote_addr - $lmremote_user [$time_local] '
    '"$request" $status $body_bytes_sent '
    '"$http_referer" "$http_user_agent"';
    
  server {
    server_name test1.selfhosted.xyz;
    access_log /log/file lm_combined;
     
    # Internal authentication request
    location = /lmauth {
      internal;
      include /etc/nginx/fastcgi_params;
      fastcgi_pass unix:__FASTCGISOCKDIR__/llng-fastcgi.sock;
       
      # Drop post datas
      fastcgi_pass_request_body  off;
      fastcgi_param CONTENT_LENGTH "";
       
      # Keep original hostname
      fastcgi_param HOST $http_host;
       
      # Keep original request (LLNG server will received /llauth)
      fastcgi_param X_ORIGINAL_URI  $request_uri;
    }
     
    # Client requests
    location / {
       
      # Activate access control
      auth_request /lmauth;
       
      # Set logs
      auth_request_set $lmremote_user $upstream_http_lm_remote_user;
      auth_request_set $lmlocation $upstream_http_location;
      error_page 401 $lmlocation;
      try_files $uri $uri/ =404;
       
      # Add as many 3-lines block as max number of headers returned by
      # configuration
      auth_request_set $headername1 $upstream_http_headername1;
      auth_request_set $headervalue1 $upstream_http_headervalue1;
      #proxy_set_header $headername1 $headervalue1;
      # OR
      #fastcgi_param $fheadername1 $headervalue1;
       
      auth_request_set $headername2 $upstream_http_headername2;
      auth_request_set $headervalue2 $upstream_http_headervalue2;
      #proxy_set_header $headername2 $headervalue2;
      # OR
      #fastcgi_param $fheadername2 $headervalue2;
       
      auth_request_set $headername3 $upstream_http_headername3;
      auth_request_set $headervalue3 $upstream_http_headervalue3;
      #proxy_set_header $headername3 $headervalue3;
      # OR
      #fastcgi_param $fheadername3 $headervalue3;
  }
}
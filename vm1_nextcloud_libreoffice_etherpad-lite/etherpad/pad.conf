# Copyright Â© 2017 David Larsson <david.larsson@selfhosted.xyz>
#
# This file is part of Nextcloud-Suite.sh.
# 
# Nextcloud-Suite.sh is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
# 
# Nextcloud-Suite.sh is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Nextcloud-Suite.sh.  If not, see
# <http://www.gnu.org/licenses/>.

# we're in the http context here
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

server {
      listen 80;
      listen [::]:80;
      server_name pad.mydomain.tld;
      rewrite ^(.*) https://$server_name$1 permanent;
}

server {
      listen lan-ip:4443 ssl http2;		
      listen [::]:443 ssl;

      server_name pad.mydomain.tld;
      access_log /var/log/nginx/eplite.access.log;
      error_log /var/log/nginx/eplite.error.log;
    
      ssl on;
      ssl_certificate /etc/letsencrypt/live/mydomain.tld/fullchain.pem;
      ssl_certificate_key /etc/letsencrypt/live/mydomain.tld/privkey.pem;
    
      ssl_session_timeout 5m;
    
      ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
      ssl_prefer_server_ciphers on;
      ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';

      #"EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 \
      #EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 \
      #EECDH EDH+aRSA RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS";

      location / {
      # See /etc/nginx/snippets/bot-protect.conf for excluded bots.
      if ($bot-protect = 1) {
        return 403;
      }
      proxy_pass http://localhost:9001/;
      proxy_set_header Host $host;
      proxy_pass_header Server;
      
      # Be carefull, this line doesn't override any proxy_buffering on set in a conf.d/file.conf
      proxy_buffering off;
      proxy_set_header X-Real-IP $remote_addr; # http://wiki.nginx.org/HttpProxyModule
      proxy_set_header X-Forwarded-For $remote_addr; # EP logs to show the actual remote IP
      proxy_set_header X-Forwarded-Proto $scheme; # for EP to set secure cookie flag when https is used
      proxy_set_header Host $host; # pass the host header
      proxy_http_version 1.1; # recommended with keepalive connections

      # WebSocket proxying - from http://nginx.org/en/docs/http/websocket.html
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
    }
}
